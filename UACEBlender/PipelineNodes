import bpy
from bpy.types import NodeTree, Node, NodeSocket

# Implementation of custom nodes from Python


# Derived from the NodeTree base type, similar to Menu, Operator, Panel, etc.
class UACEPipelineNodes(NodeTree):
    # Description string
    '''A custom node tree type that will show up in the editor type list'''
    # Optional identifier string. If not explicitly defined, the python class name is used.
    bl_idname = 'UACEPipelineTreeType'
    # Label for nice name display
    bl_label = "UACE Pipeline nodes"
    # Icon identifier
    bl_icon = 'NODETREE'

class UACETextureResourceSocket(NodeSocket):
    # Description string
    '''Custom node socket type'''
    # Optional identifier string. If not explicitly defined, the python class name is used.
    bl_idname = 'UACETextureResourceSocket'
    # Label for nice name display
    bl_label = "Texture resource socket"

    # Optional function for drawing the socket input value
    def draw(self, context, layout, node, text):
        layout.label(text=text)

    # Socket color
    def draw_color(self, context, node):
        return (0.4, 0.4, 1.0, 1.0)
    
class UACETextureDescSocket(NodeSocket):
    # Description string
    '''Custom node socket type'''
    # Optional identifier string. If not explicitly defined, the python class name is used.
    bl_idname = 'UACETextureDescSocket'
    # Label for nice name display
    bl_label = "Texture desc socket"

    # Optional function for drawing the socket input value
    def draw(self, context, layout, node, text):
        layout.label(text=text)

    # Socket color
    def draw_color(self, context, node):
        return (0.2, 0.2, 1.0, 1.0)

# Mix-in class for all custom nodes in this tree type.
# Defines a poll function to enable instantiation.
class UACEPipelineNode:
    @classmethod
    def poll(cls, ntree):
        return ntree.bl_idname == 'UACEPipelineTreeType'


class UACEPassNode(Node, UACEPipelineNode):
    # === Basics ===
    # Description string
    '''Pass node desc'''
    # Optional identifier string. If not explicitly defined, the python class name is used.
    bl_idname = 'UACEPassNode'
    # Label for nice name display
    bl_label = "Pass Node"
    # Icon identifier
    # bl_icon = 'SOUND'

    # === Optional Functions ===
    # Initialization function, called when a new node is created.
    # This is the most common place to create the sockets for a node, as shown below.
    # NOTE: this is not the same as the standard __init__ function in Python, which is
    #       a purely internal Python method and unknown to the node system!
    def init(self, context):
        pass
        # self.inputs.new('UACETextureResourceSocket', "World")
        # self.inputs.new('NodeSocketVector', "!")

        # self.outputs.new('UACETextureResourceSocket', "are")
        # self.outputs.new('NodeSocketFloat', "you")'''

    # Copy function to initialize a copied node from an existing one.
    def copy(self, node):
        pass
        print("Copying from node ", node)

    # Free function to clean up on removal.
    def free(self):
        pass
        print("Removing node ", self, ", Goodbye!")

    # Additional buttons displayed on the node.
    def draw_buttons(self, context, layout):
        pass

    # Detail buttons in the sidebar.
    # If this function is not defined, the draw_buttons function is used instead
    def draw_buttons_ext(self, context, layout):
        pass

    # Optional: custom label
    # Explicit user label overrides this, but here we can define a label dynamically
    def draw_label(self):
        return "Pass node"

class UACETextureResourceNode(Node, UACEPipelineNode):
    # === Basics ===
    # Description string
    '''Pass node desc'''
    # Optional identifier string. If not explicitly defined, the python class name is used.
    bl_idname = 'UACETextureResourceNode'
    # Label for nice name display
    bl_label = "Texture resource Node"
    # Icon identifier
    # bl_icon = 'SOUND'

    # === Optional Functions ===
    # Initialization function, called when a new node is created.
    # This is the most common place to create the sockets for a node, as shown below.
    # NOTE: this is not the same as the standard __init__ function in Python, which is
    #       a purely internal Python method and unknown to the node system!
    def init(self, context):
        pass
        self.inputs.new('UACETextureResourceSocket', "in")
        self.inputs.new('NodeSocketString', "Name")
        self.inputs.new('UACETextureDescSocket', "Desc")

        self.outputs.new('UACETextureResourceSocket', "out")
        # self.outputs.new('NodeSocketFloat', "you")'''

    # Copy function to initialize a copied node from an existing one.
    def copy(self, node):
        pass
        print("Copying from node ", node)

    # Free function to clean up on removal.
    def free(self):
        pass
        print("Removing node ", self, ", Goodbye!")

    # Additional buttons displayed on the node.
    def draw_buttons(self, context, layout):
        pass

    # Detail buttons in the sidebar.
    # If this function is not defined, the draw_buttons function is used instead
    def draw_buttons_ext(self, context, layout):
        pass

    # Optional: custom label
    # Explicit user label overrides this, but here we can define a label dynamically
    def draw_label(self):
        return "Texture resource"
    
    def insert_link(self, link):
        print("Link!")

### Node Categories ###
# Node categories are a python system for automatically
# extending the Add menu, toolbar panels and search operator.
# For more examples see release/scripts/startup/nodeitems_builtins.py

import nodeitems_utils
from nodeitems_utils import NodeCategory, NodeItem

# our own base class with an appropriate poll function,
# so the categories only show up in our own tree type


class PipeleneNodeCategory(NodeCategory):
    @classmethod
    def poll(cls, context):
        return context.space_data.tree_type == 'UACEPipelineTreeType'


# all categories in a list
node_categories = [
    # identifier, label, items list
    PipeleneNodeCategory('UACE_PIPELINE_CATEGORY', "Pipeline", items=[
        # our basic node
        NodeItem("UACEPassNode"),
        NodeItem("UACETextureResourceNode"),
    ]),
]

classes = (
    UACEPipelineNodes,
    UACETextureResourceSocket,
    UACETextureDescSocket,
    UACEPassNode,
    UACETextureResourceNode,
)


def register():
    from bpy.utils import register_class
    for cls in classes:
        register_class(cls)

    nodeitems_utils.register_node_categories('UACE_PIPELINE_NODES', node_categories)


def unregister():
    try:
        nodeitems_utils.unregister_node_categories('UACE_PIPELINE_NODES')

        from bpy.utils import unregister_class
        for cls in reversed(classes):
            unregister_class(cls)
    except:
        pass


if __name__ == "__main__":
    unregister()
    register()
